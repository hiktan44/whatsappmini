{"extracted_information": "Modern sürükle ve bırak yükleme kullanıcı arayüzleri, dosya yüklemeyi kullanıcılar için kolay ve kullanıcı dostu hale getirir. Bu araçlar, kullanıcıların web siteleriyle etkileşimini değiştirmiştir. Günümüzde kolay ve verimli bir sürükle ve bırak deneyimi, kullanıcıları mutlu ve etkileşimde tutmak için hayati öneme sahiptir. Özel bir modern sürükle ve bırak yükleme arayüzü, mevcut bir çözüme göre daha fazla esneklik ve özel özellikler sunar. Kullanıcı bir dosyayı sürükleyip bırakma hedefine taşıdığında, sürükle ve bırak özelliği devreye girer. Kullanıcılar, fare imlecinin değişerek dosyaları bırakılacak yeri işaret etmesini bekler. Kullanıcı fare düğmesini bıraktığında, bırakma işlevi tetiklenir. Bu, bir dosya simgesiyle geliştirilebilir ve kullanıcılar isterse dosya gezginini açma seçeneği sunulabilir.", "specifications": {"teknoloji_yığını": "HTML5, JavaScript, React, Angular, Vue.js", "temel_kurulum": {"aciklama": "Kullanıcıların dosyaları sürükleyip bırakabileceği bir alan oluşturun. HTML ile bu alanı tanımlayın ve JavaScript ile sürükle ve bırak eylemlerini yönetin.", "html_ornek": "<div id=\"drop-zone\" style=\"border: 2px dashed #cccccc; padding: 20px; text-align: center;\">Dosyaları buraya bırakın</div>", "js_ornek": "const dropZone = document.getElementById('drop-zone');\ndropZone.addEventListener('dragover', (e) => e.preventDefault());\ndropZone.addEventListener('drop', (e) => {\n  e.preventDefault();\n  console.log(e.dataTransfer.files);\n});"}, "ilerleme_gorsellestirme": {"aciklama": "Kullanıcıların yükleme ilerlemesini gerçek zamanlı görmelerini sağlayan bir ilerleme çubuğu oluşturur.", "html_ornek": "<progress id=\"upload-progress\" value=\"0\" max=\"100\"></progress>\n<p id=\"status-text\">Yükleniyor...</p>"}, "dosya_onizlemeleri": {"aciklama": "Seçilen dosyalar için küçük resimler göstererek yükleme deneyimini geliştirir.", "html_ornek": "<input type=\"file\" id=\"file-input\" multiple>\n<div id=\"preview-container\"></div>", "js_ornek": "const fileInput = document.getElementById('file-input');\nconst previewContainer = document.getElementById('preview-container');\nfileInput.addEventListener('change', (e) => {\n  for (const file of e.target.files) {\n    if (file.type.startsWith('image/')) {\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        const img = document.createElement('img');\n        img.src = event.target.result;\n        img.style.maxWidth = '100px';\n        previewContainer.appendChild(img);\n      };\n      reader.readAsDataURL(file);\n    }\n  }\n});"}, "parcalı_yuklemeler": {"aciklama": "Büyük dosyaları daha küçük parçalara bölerek yüklemeyi daha hızlı ve güvenilir hale getirir, ayrıca duraklatma ve devam ettirme işlevselliği sağlar.", "js_ornek": "async function uploadChunk(file, start, end) {\n  const chunk = file.slice(start, end);\n  const formData = new FormData();\n  formData.append('file', chunk);\n  await fetch('/upload', {\n    method: 'POST',\n    body: formData,\n  });\n}\nasync function uploadFileInChunks(file) {\n  const chunkSize = 1024 * 1024; // 1MB chunks\n  for (let start = 0; start < file.size; start += chunkSize) {\n    const end = Math.min(start + chunkSize, file.size);\n    await uploadChunk(file, start, end);\n  }\n}\nconst fileInput = document.getElementById('file-input');\nfileInput.addEventListener('change', () => {\n  const file = fileInput.files[0];\n  uploadFileInChunks(file);\n});"}, "dosya_turu_kisitlamalari": {"aciklama": "Zararlı dosyaların yüklenmesini önlemek için yalnızca belirli dosya türlerine izin verir.", "python_ornek": "def is_allowed_file(filename):\n  allowed_extensions = {'jpg', 'png', 'pdf'}\n  return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extensions\n# Example usage\nfilename = 'example.jpg'\nif is_allowed_file(filename):\n  print(\"Dosya türüne izin verilir.\")\nelse:\n  print(\"Dosya türüne izin verilmez. Dosya bırakılıyor.\")"}, "react_entegrasyonu": {"aciklama": "React ile sürükle ve bırak yükleme bileşeni oluşturma.", "react_ornek": "import React, { useState } from 'react';\nconst DragDropUpload = () => {\n  const [file, setFile] = useState(null);\n  const handleDrop = (event) => {\n    event.preventDefault();\n    let droppedFile = event.dataTransfer.files[0];\n    setFile(droppedFile);\n  };\n  const handleDragOver = (event) => {\n    event.preventDefault();\n  };\n  return (\n    <div\n      onDrop={handleDrop}\n      onDragOver={handleDragOver}\n      style={{ border: '2px dashed #cccccc', padding: '20px', textAlign: 'center' }}\n    >\n      {file ? (\n        <p>Dosya: {file.name}</p>\n      ) : (\n        <p>Bir dosyayı buraya sürükleyip bırakın</p>\n      )}\n    </div>\n  );\n};\nexport default DragDropUpload;"}, "istemci_taraflı_goruntu_optimizasyonu": {"aciklama": "Yükleme öncesi dosya boyutunu azaltmak için istemci tarafında görüntüleri yeniden boyutlandırır ve sıkıştırır.", "js_ornek": "const resizeAndCompressImage = (file, maxWidth, maxHeight, quality) => {\n  return new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const img = new Image();\n      img.src = event.target.result;\n      img.onload = () => {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const widthRatio = maxWidth / img.width;\n        const heightRatio = maxHeight / img.height;\n        const ratio = Math.min(widthRatio, heightRatio);\n        canvas.width = img.width * ratio;\n        canvas.height = img.height * ratio;\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        canvas.toBlob(\n          (blob) => resolve(blob),\n          'image/jpeg',\n          quality\n        );\n      };\n    };\n    reader.readAsDataURL(file);\n  });\n};\n// Example usage\n// const file = document.querySelector('input[type=\"file\"]').files[0];\n// resizeAndCompressImage(file, 800, 600, 0.7).then((optimizedBlob) => {\n// console.log('Optimize edilmiş görüntü', optimizedBlob);\n// });"}, "klavye_erisebilirligi": {"aciklama": "Klavye navigasyonu ve ekran okuyucu desteği ekleyerek erişilebilirliği artırır.", "react_ornek": "import React, { useState } from 'react';\nconst DragDropUpload = () => {\n  const [file, setFile] = useState(null);\n  const handleDrop = (event) => {\n    event.preventDefault();\n    let droppedFile = event.dataTransfer ? event.dataTransfer.files[0] : event.target.files[0];\n    setFile(droppedFile);\n  };\n  const handleKeyDown = (event) => {\n    if (event.key === 'Enter' || event.key === ' ') {\n      document.querySelector('input[type=\"file\"]').click();\n    }\n  };\n  return (\n    <div\n      onDrop={handleDrop}\n      onDragOver={(event) => event.preventDefault()}\n      onKeyDown={handleKeyDown}\n      style={{ border: '2px dashed #cccccc', padding: '20px', textAlign: 'center' }}\n      role=\"button\"\n      aria-label=\"Bir dosyayı buraya sürükleyip bırakın veya bir dosya seçmek için Enter tuşuna basın\"\n    >\n      {file ? (\n        <p>Dosya: {file.name}</p>\n      ) : (\n        <p>Bir dosyayı buraya sürükleyip bırakın veya Enter tuşuna basın</p>\n      )}\n    </div>\n  );\n};\nexport default DragDropUpload;"}}, "pricing": {}, "features": [{"ad": "Duyarlı Tasarım", "aciklama": "Arayüzün tüm cihazlarda iyi çalışmasını sağlar."}, {"ad": "Çoklu Dosya Yüklemeleri", "aciklama": "Kullanıcıların birden fazla dosyayı aynı anda sürükleyip bırakmasına olanak tanır ve görsel geri bildirim sağlar."}, {"ad": "Gerçek Zamanlı Yükleme İlerlemesi Göstergeleri", "aciklama": "Kullanıcılara yüklemelerinin durumu hakkında bilgi verir."}, {"ad": "Görsel İpuçları ve Animasyonlar", "aciklama": "Kullanıcılar dosyaları üzerine sürüklediğinde bırakma hedefi rengini değiştirme ve pürüzsüz animasyonlar ekleyerek cilalı bir his sağlar."}, {"ad": "Dosya Tipi Doğrulama", "aciklama": "Hataları önlemek için dosya türlerini doğrular ve yanlış giderse net hata mesajları gösterir."}, {"ad": "Görüntü ve Belge Önizlemeleri", "aciklama": "Kullanıcıların yükledikleri şeyi görmeleri için önizlemeler sunar."}, {"ad": "Klasör Yüklemeleri", "aciklama": "Kullanıcıların tek tek dosyalar yerine tüm klasörleri sürükleyip bırakmasına olanak tanır."}, {"ad": "Parçalı Yüklemeler", "aciklama": "Büyük dosyaları daha küçük parçalara ayırarak yüklemeyi daha hızlı ve güvenilir hale getirir."}, {"ad": "Duraklatma ve Devam Ettirme", "aciklama": "Kullanıcılara yüklemeleri üzerinde kontrol sağlar, özellikle büyük dosyalar için faydalıdır."}], "statistics": {}, "temporal_info": {"yayinlanma_tarihi": "Ağustos 8, 2024", "son_guncelleme_tarihi": "Temmuz 2, 2025"}, "geographical_data": {}, "references": [{"name": "Simplifying Drag and Drop", "url": "https://medium.com/androiddevelopers/simplifying-drag-and-drop-3713d6ef526e"}, {"name": "Boosting website with quick image uploads", "url": "http://blog.filestack.com/boosting-website-with-quick-image-uploads/"}, {"name": "Filestack Blog Post (10715)", "url": "https://blog.filestack.com/?post_type=post&p=10715"}, {"name": "JavaScript for drag and drop", "url": "https://blog.filestack.com/?post_type=post&p=10986"}, {"name": "Filestack", "url": "https://www.filestack.com/"}, {"name": "Filestack Pricing", "url": "https://www.filestack.com/pricing/?_gl=1*v6dh2v*_gcl_au*MTYwMDMwNzIxNS4xNzIyNjY0NjA1*_ga*MTU3MjM3NjM1OS4xNjk2MjI4Mjg5*_ga_QPH6PZF42T*MTcyMzE0NDQ5OS40NzkuMS4xNzIzMTQ4MTYzLjU2LjAuMA..#/marketplace"}, {"name": "Filestack Signup", "url": "https://dev.filestack.com/signup/free/"}]}